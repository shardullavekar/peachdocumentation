{
    "docs": [
        {
            "location": "/", 
            "text": "Getting Started\n\n\nAt Peach Payments, we are committed to offer a seamless integration experience to our developers.\n\n\nWe are happy to launch Devsupport AI - a bot programmer that integrates our Android SDK with your code in few minutes.\n\n\n\n\nSandbox Integration\n\n\nAt the end of this integration, you can test payments on our Sandbox Environment. Note that Sandbox and Production credentails are different.\n\n\n\n\nWhat do I need?\n\n\n\n\nUser Id\n\n\nPassword\n\n\nEntity Id\n\n\nA Backend Server \n\n\n\n\n\n\nServer Script\n\n\nWe currently support PHP on the back end server. If you use any other back end technology, check \nother back end techs.\n\n\n\n\nGet your Entity Id from \nPeach Payments Dashboard\n\n\nSteps\n\n\nYou will first complete your back end integration, host the files Devsupport AI tool gives you and keep their publicly available URLs ready.\n\n\n\n\n\n\nDownload the Devsupport AI\n. tool. Install the .exe if you are on Windows, mac.zip if you are on Mac and .deb if you are on Linux. You should see a screen below:\n  \n\n\n\n\n\n\nLink the home directory of your Android project.\n  \n\n\n\n\n\n\nClick on Integrate button.\n\n\n\n\n\n\nSearch for Peachpayments when asked for Product you'd like to integrate.\n\n\n\n\n\n\nIf you are using PHP, select 'PHP for mobile SDK'. If you are using some other back end technology, check \nother back end techs.\n\n\n\n\n\n\nEnter your User Id, Password and Entity Id. If you enter wrong key combination, the tool will throw an error!\n\n\n\n\n\n\nDownload the notify.php and host it on your server. Keep it's URL ready.\n\n\n\n\n\n\nEnter the publicly available URL for the notify.php you just downloaded and also enter your company name(without spaces).\nIt will be used for callback.\n\n\n\n\n\n\nDownload the action.php, host it and give its URL in next step.\n\n\n\n\n\n\nNote that both notify.php and action.php contain your Sandbox Credentials. DO NOT Modify them.\n\n\n\n\n\n\nIf everything went well, you should see a success screen like this:\n  \n\n\n\n\n\n\nProceed to Android Integration to complete the flow.\n\n\n\n\n\n\nEnter the URL to the action.php you just downloaded. \n\n\n\n\n\n\nDevsupport AI will show you a list of injections the bot will do.\n\n\n\n\n\n\nApply changes and if everything went well, you should see a screen like this:\n\n\n\n\n\n\n\n\nKeep your credentials safe\n\n\nDevsupport AI tool doesn't store your credentials. You are responsible for your credentials. Keep them safe!\n\n\n\n\nInitiating Payments\n\n\nIn the activity you selected and just call callPeachPayments as shown below:\n\n\ncallPeachPayments(amount, currency, payment_type, env);\n\n\nfor e.g.\n\n\n\n\n\n\ncallPeachPayments(\"95.00\", \"EUR\", \"DB\", Config.TEST);\n for Debit payment on test.\n\n\n\n\n\n\ncallPeachPayments(\"95.00\", \"EUR\", \"PA\", Config.PROD);\n for Preauthorization payment on production.\n\n\n\n\n\n\nHandling Response\n\n\nYou will receive a call back on the below function:\n\n\nprivate void initListener() {\n            peachListener = new PeachListener() {\n                @Override\n                public void onSuccess(String response) {\n                    Toast.makeText(getApplicationContext(), \nSuccess:\n + response, Toast.LENGTH_LONG)\n                            .show();\n                }\n\n                @Override\n                public void onFailure(int code, String reason) {\n                    Toast.makeText(getApplicationContext(), \nFailed Reason:\n + reason, Toast.LENGTH_LONG)\n                            .show();\n                }\n            };\n        }\n\n\n\n\n\nSuccess Response Format\n\n\n{\n\n\nid\n:\n8a8294496059beaf01606d7130426f90\n,\n\n\npaymentType\n:\nDB\n,\n\n\npaymentBrand\n:\nVISA\n,\n\n\namount\n:\n95.00\n,\n\n\ncurrency\n:\nEUR\n,\n\n\ndescriptor\n:\nABC*\n,\n\n\nresult\n:{\n\n\ncode\n:\n000.100.110\n,\n\n\ndescription\n:\nRequest successfully processed in \nMerchant in Integrator Test Mode\n\n\n},\n\n\nresultDetails\n:{\n\n\nclearingInstituteName\n:\nElavon-euroconex_UK_Test\n\n\n},\n\n\ncard\n:{\n\n\nbin\n:\n424242\n,\n\n\nlast4Digits\n:\n4242\n,\n\n\nholder\n:\ntester test\n,\n\n\nexpiryMonth\n:\n01\n,\n\n\nexpiryYear\n:\n2021\n\n\n},\n\n\ncustomer\n:{\n\n\nip\n:\n183.82.20.38\n\n\n},\n\n\nthreeDSecure\n:{\n\n\neci\n:\n06\n\n\n},\n\n\ncustomParameters\n:{\n\n\nSHOPPER_device\n:\nGenymotion Android Google Nexus 5X - 7.0.0 - API 24 - 1080x1920\n,\n\n\nSHOPPER_MSDKIntegrationType\n:\nCheckout UI\n,\n\n\nCTPE_DESCRIPTOR_TEMPLATE\n:\nABC* ${USAGE}\n,\n\n\nSHOPPER_OS\n:\nAndroid 7.0\n,\n\n\nSHOPPER_MSDKVersion\n:\n2.2.0\n,\n\n\nSHOPPER_deviceId\n:\n000000000000000\n\n\n},\n\n\nrisk\n:{\n\n\nscore\n:\n0\n\n\n},\n\n\nbuildNumber\n:\na19bfe31a0a82856de8df0ce254123b5dfdc5fbe@2017-12-15 12:56:54 +0000\n,\n\n\ntimestamp\n:\n2017-12-19 06:23:42+0000\n,\n\n\nndc\n:\n4AD2A6AB8255CE012DA914A441A19693.sbg-vm-tx02\n\n\n}\n\n\n\n\n\n\nFailure Response Format\n\n\n{\n\n\nid\n:\n8a82944a6059df3701606d757f491168\n,\n\n\npaymentType\n:\nDB\n,\n\n\npaymentBrand\n:\nVISA\n,\n\n\nresult\n:{\n\n\ncode\n:\n100.380.401\n,\n\n\ndescription\n:\nUser Authentication Failed\n\n\n},\n\n\nresultDetails\n:{\n\n\nclearingInstituteName\n:\nElavon-euroconex_UK_Test\n\n\n},\n\n\ncard\n:{\n\n\nbin\n:\n411111\n,\n\n\nlast4Digits\n:\n1111\n,\n\n\nholder\n:\ntester test\n,\n\n\nexpiryMonth\n:\n01\n,\n\n\nexpiryYear\n:\n2021\n\n\n},\n\n\ncustomer\n:{\n\n\nip\n:\n183.82.20.38\n\n\n},\n\n\nthreeDSecure\n:{\n\n\neci\n:\n07\n,\n\n\nverificationId\n:\n,\n\n\nxid\n:\nCAACCVVUlwCXUyhQNlSXAAAAAAA=\n,\n\n\npaRes\n:\npares\n\n\n},\n\n\ncustomParameters\n:{\n\n\nSHOPPER_device\n:\nGenymotion Android Google Nexus 5X - 7.0.0 - API 24 - 1080x1920\n,\n\n\nSHOPPER_MSDKIntegrationType\n:\nCheckout UI\n,\n\n\nCTPE_DESCRIPTOR_TEMPLATE\n:\nABC* ${USAGE}\n,\n\n\nSHOPPER_OS\n:\nAndroid 7.0\n,\n\n\nSHOPPER_MSDKVersion\n:\n2.2.0\n,\n\n\nSHOPPER_deviceId\n:\n000000000000000\n\n\n},\n\n\nrisk\n:{\n\n\nscore\n:\n100\n\n\n},\n\n\nbuildNumber\n:\na19bfe31a0a82856de8df0ce254123b5dfdc5fbe@2017-12-15 12:56:54 +0000\n,\n\n\ntimestamp\n:\n2017-12-19 06:28:38+0000\n,\n\n\nndc\n:\n2E8F0A9725C6F8AF6A04E6C419C31C6F.sbg-vm-tx02\n\n\n}\n\n\n\n\n\n\nSwitching to Production\n\n\nGet your production credentials from \nProduction Peach Payments dashboard\n.\n\n\nChange the following in action.php and notify.php:\n\n\n\n\n\n\nChange URL from \"https://test.oppwa.com/\" to \"https://oppwa.com/\".\n\n\n\n\n\n\nChange User Id to Production User Id.\n\n\n\n\n\n\nChange Password to Production Password.\n\n\n\n\n\n\nChange Entity Id to Production Entity Id.\n\n\n\n\n\n\n\n\nSuccess\n\n\nCongrats! You just completed integrating our SDK. If you need help, you can chat with us using the orange icon on the tool or write us an email at support@devsupport.ai - happy to help!", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#getting-started", 
            "text": "At Peach Payments, we are committed to offer a seamless integration experience to our developers.  We are happy to launch Devsupport AI - a bot programmer that integrates our Android SDK with your code in few minutes.   Sandbox Integration  At the end of this integration, you can test payments on our Sandbox Environment. Note that Sandbox and Production credentails are different.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#what-do-i-need", 
            "text": "User Id  Password  Entity Id  A Backend Server     Server Script  We currently support PHP on the back end server. If you use any other back end technology, check  other back end techs.   Get your Entity Id from  Peach Payments Dashboard", 
            "title": "What do I need?"
        }, 
        {
            "location": "/#steps", 
            "text": "You will first complete your back end integration, host the files Devsupport AI tool gives you and keep their publicly available URLs ready.    Download the Devsupport AI . tool. Install the .exe if you are on Windows, mac.zip if you are on Mac and .deb if you are on Linux. You should see a screen below:\n      Link the home directory of your Android project.\n      Click on Integrate button.    Search for Peachpayments when asked for Product you'd like to integrate.    If you are using PHP, select 'PHP for mobile SDK'. If you are using some other back end technology, check  other back end techs.    Enter your User Id, Password and Entity Id. If you enter wrong key combination, the tool will throw an error!    Download the notify.php and host it on your server. Keep it's URL ready.    Enter the publicly available URL for the notify.php you just downloaded and also enter your company name(without spaces).\nIt will be used for callback.    Download the action.php, host it and give its URL in next step.    Note that both notify.php and action.php contain your Sandbox Credentials. DO NOT Modify them.    If everything went well, you should see a success screen like this:\n      Proceed to Android Integration to complete the flow.    Enter the URL to the action.php you just downloaded.     Devsupport AI will show you a list of injections the bot will do.    Apply changes and if everything went well, you should see a screen like this:     Keep your credentials safe  Devsupport AI tool doesn't store your credentials. You are responsible for your credentials. Keep them safe!", 
            "title": "Steps"
        }, 
        {
            "location": "/#initiating-payments", 
            "text": "In the activity you selected and just call callPeachPayments as shown below:  callPeachPayments(amount, currency, payment_type, env);  for e.g.    callPeachPayments(\"95.00\", \"EUR\", \"DB\", Config.TEST);  for Debit payment on test.    callPeachPayments(\"95.00\", \"EUR\", \"PA\", Config.PROD);  for Preauthorization payment on production.", 
            "title": "Initiating Payments"
        }, 
        {
            "location": "/#handling-response", 
            "text": "You will receive a call back on the below function:  private void initListener() {\n            peachListener = new PeachListener() {\n                @Override\n                public void onSuccess(String response) {\n                    Toast.makeText(getApplicationContext(),  Success:  + response, Toast.LENGTH_LONG)\n                            .show();\n                }\n\n                @Override\n                public void onFailure(int code, String reason) {\n                    Toast.makeText(getApplicationContext(),  Failed Reason:  + reason, Toast.LENGTH_LONG)\n                            .show();\n                }\n            };\n        }", 
            "title": "Handling Response"
        }, 
        {
            "location": "/#success-response-format", 
            "text": "{  id : 8a8294496059beaf01606d7130426f90 ,  paymentType : DB ,  paymentBrand : VISA ,  amount : 95.00 ,  currency : EUR ,  descriptor : ABC* ,  result :{  code : 000.100.110 ,  description : Request successfully processed in  Merchant in Integrator Test Mode  },  resultDetails :{  clearingInstituteName : Elavon-euroconex_UK_Test  },  card :{  bin : 424242 ,  last4Digits : 4242 ,  holder : tester test ,  expiryMonth : 01 ,  expiryYear : 2021  },  customer :{  ip : 183.82.20.38  },  threeDSecure :{  eci : 06  },  customParameters :{  SHOPPER_device : Genymotion Android Google Nexus 5X - 7.0.0 - API 24 - 1080x1920 ,  SHOPPER_MSDKIntegrationType : Checkout UI ,  CTPE_DESCRIPTOR_TEMPLATE : ABC* ${USAGE} ,  SHOPPER_OS : Android 7.0 ,  SHOPPER_MSDKVersion : 2.2.0 ,  SHOPPER_deviceId : 000000000000000  },  risk :{  score : 0  },  buildNumber : a19bfe31a0a82856de8df0ce254123b5dfdc5fbe@2017-12-15 12:56:54 +0000 ,  timestamp : 2017-12-19 06:23:42+0000 ,  ndc : 4AD2A6AB8255CE012DA914A441A19693.sbg-vm-tx02  }", 
            "title": "Success Response Format"
        }, 
        {
            "location": "/#failure-response-format", 
            "text": "{  id : 8a82944a6059df3701606d757f491168 ,  paymentType : DB ,  paymentBrand : VISA ,  result :{  code : 100.380.401 ,  description : User Authentication Failed  },  resultDetails :{  clearingInstituteName : Elavon-euroconex_UK_Test  },  card :{  bin : 411111 ,  last4Digits : 1111 ,  holder : tester test ,  expiryMonth : 01 ,  expiryYear : 2021  },  customer :{  ip : 183.82.20.38  },  threeDSecure :{  eci : 07 ,  verificationId : ,  xid : CAACCVVUlwCXUyhQNlSXAAAAAAA= ,  paRes : pares  },  customParameters :{  SHOPPER_device : Genymotion Android Google Nexus 5X - 7.0.0 - API 24 - 1080x1920 ,  SHOPPER_MSDKIntegrationType : Checkout UI ,  CTPE_DESCRIPTOR_TEMPLATE : ABC* ${USAGE} ,  SHOPPER_OS : Android 7.0 ,  SHOPPER_MSDKVersion : 2.2.0 ,  SHOPPER_deviceId : 000000000000000  },  risk :{  score : 100  },  buildNumber : a19bfe31a0a82856de8df0ce254123b5dfdc5fbe@2017-12-15 12:56:54 +0000 ,  timestamp : 2017-12-19 06:28:38+0000 ,  ndc : 2E8F0A9725C6F8AF6A04E6C419C31C6F.sbg-vm-tx02  }", 
            "title": "Failure Response Format"
        }, 
        {
            "location": "/#switching-to-production", 
            "text": "Get your production credentials from  Production Peach Payments dashboard .  Change the following in action.php and notify.php:    Change URL from \"https://test.oppwa.com/\" to \"https://oppwa.com/\".    Change User Id to Production User Id.    Change Password to Production Password.    Change Entity Id to Production Entity Id.     Success  Congrats! You just completed integrating our SDK. If you need help, you can chat with us using the orange icon on the tool or write us an email at support@devsupport.ai - happy to help!", 
            "title": "Switching to Production"
        }, 
        {
            "location": "/Other Backend Techs/", 
            "text": "Using Go/Node JS/Java\n\n\nThe back end script does 3 main jobs.\n\n\n\n\n\n\nCreates Checkout\n\n\n\n\n\n\nChecks Payment Status with Peachpayments\n\n\n\n\n\n\nCapture Payment after authorised.\n\n\n\n\n\n\nCheckout\n\n\nHere's how checkout is created:\n\n\ncurl https://test.oppwa.com/v1/checkouts \\\n    -d \nauthentication.userId=8a8294174b7ecb28014b9699220015cc\n \\\n    -d \nauthentication.password=sy6KJsT8\n \\\n    -d \nauthentication.entityId=8a8294174b7ecb28014b9699220015ca\n \\\n    -d \namount=92.00\n \\\n    -d \ncurrency=EUR\n \\\n    -d \npaymentType=DB\n \\\n    -d \nshopperResultUrl=my.app://custom/url\n \\\n    -d \nnotificationUrl=http://www.example.com/notify\n\n\n\n\n\n\n\n\nPayment Type, ShopperResult and Notification URL\n\n\nPayment Type could be DB or PA for direct debit or pre-authorization.\n\n\nShopperResult URL should be set to your company name + ://callback. e.g. mycompanyname://callback - ensure that you give the same name to the tool when asked about company name.\n\n\nNotification URL is where we post the payment result. It's a server to server call.\n\n\n\n\nPayment Status\n\n\nHere's how you can check the payment status:\n\n\ncurl -G https://test.oppwa.com/v1/checkouts/{id}/payment \\\n    -d \nauthentication.userId=8a8294174b7ecb28014b9699220015cc\n \\\n    -d \nauthentication.password=sy6KJsT8\n \\\n    -d \nauthentication.entityId=8a8294174b7ecb28014b9699220015ca\n\n\n\n\n\n\n\n\nPayment Id\n\n\nYou will get a payment Id once the payment is completed. \n\n\nPass this id as shown above and check the payment status. \n\n\n\n\nCapture Payment\n\n\nAfter the Payment is authorized (when you initiate payment type as PA from your Android code) you need to capture it from your server.\n\n\nHere's how you can capture the payment:\n\n\ncurl https://test.oppwa.com/v1/payments/{id} \\\n    -d \nauthentication.userId=8a8294174e735d0c014e78cf266b1794\n \\\n    -d \nauthentication.entityId=8a8294174e735d0c014e78cf26461790\n \\\n    -d \nauthentication.password=qyyfHCN83e\n \\\n    -d \namount=92.00\n \\\n    -d \ncurrency=EUR\n \\\n    -d \npaymentType=CP\n\n\n\n\n\n\n\n\nId\n\n\nFirst, check the payment status and get the Id from the status call. \n\n\nCall capture payment as shown above with the Id you get from the status call. \n\n\n\n\nArranging Checkout, Payment Status and Capture\n\n\n\n\nCombine these 3 calls in one server script.\n\n\nThis server script should accept a POST parameter called action. action could be checkout, getPaymentStatus or capture.\n\n\nFor checkout, the script should accpet POST parameters amount, currency and paymentType and pass it on to checkout call.\n\n\nFor payment Status, the script should accept resourcePath and pass it on to status call.\n\n\nFor capturing payment, call the payment status first, get the payment id and pass it on the status check call.\n\n\n\n\nOnce your server script is ready, host it on your server, keep it's URL ready and proceed with the Android integration using the devsupport AI tool.\n\n\nChange the following in your server script:\n\n\n\n\n\n\nChange URL from \"https://test.oppwa.com/\" to \"https://oppwa.com/\".\n\n\n\n\n\n\nChange User Id to Production User Id.\n\n\n\n\n\n\nChange Password to Production Password.\n\n\n\n\n\n\nChange Entity Id to Production Entity Id.\n\n\n\n\n\n\n\n\nSuccess\n\n\nCongrats! You just completed server integration. \n\n\nIf you need help, write us an email at support@devsupport.ai - happy to help!", 
            "title": "Using Go/Node JS/Java"
        }, 
        {
            "location": "/Other Backend Techs/#using-gonode-jsjava", 
            "text": "The back end script does 3 main jobs.    Creates Checkout    Checks Payment Status with Peachpayments    Capture Payment after authorised.", 
            "title": "Using Go/Node JS/Java"
        }, 
        {
            "location": "/Other Backend Techs/#checkout", 
            "text": "Here's how checkout is created:  curl https://test.oppwa.com/v1/checkouts \\\n    -d  authentication.userId=8a8294174b7ecb28014b9699220015cc  \\\n    -d  authentication.password=sy6KJsT8  \\\n    -d  authentication.entityId=8a8294174b7ecb28014b9699220015ca  \\\n    -d  amount=92.00  \\\n    -d  currency=EUR  \\\n    -d  paymentType=DB  \\\n    -d  shopperResultUrl=my.app://custom/url  \\\n    -d  notificationUrl=http://www.example.com/notify    Payment Type, ShopperResult and Notification URL  Payment Type could be DB or PA for direct debit or pre-authorization.  ShopperResult URL should be set to your company name + ://callback. e.g. mycompanyname://callback - ensure that you give the same name to the tool when asked about company name.  Notification URL is where we post the payment result. It's a server to server call.", 
            "title": "Checkout"
        }, 
        {
            "location": "/Other Backend Techs/#payment-status", 
            "text": "Here's how you can check the payment status:  curl -G https://test.oppwa.com/v1/checkouts/{id}/payment \\\n    -d  authentication.userId=8a8294174b7ecb28014b9699220015cc  \\\n    -d  authentication.password=sy6KJsT8  \\\n    -d  authentication.entityId=8a8294174b7ecb28014b9699220015ca    Payment Id  You will get a payment Id once the payment is completed.   Pass this id as shown above and check the payment status.", 
            "title": "Payment Status"
        }, 
        {
            "location": "/Other Backend Techs/#capture-payment", 
            "text": "After the Payment is authorized (when you initiate payment type as PA from your Android code) you need to capture it from your server.  Here's how you can capture the payment:  curl https://test.oppwa.com/v1/payments/{id} \\\n    -d  authentication.userId=8a8294174e735d0c014e78cf266b1794  \\\n    -d  authentication.entityId=8a8294174e735d0c014e78cf26461790  \\\n    -d  authentication.password=qyyfHCN83e  \\\n    -d  amount=92.00  \\\n    -d  currency=EUR  \\\n    -d  paymentType=CP    Id  First, check the payment status and get the Id from the status call.   Call capture payment as shown above with the Id you get from the status call.", 
            "title": "Capture Payment"
        }, 
        {
            "location": "/Other Backend Techs/#arranging-checkout-payment-status-and-capture", 
            "text": "Combine these 3 calls in one server script.  This server script should accept a POST parameter called action. action could be checkout, getPaymentStatus or capture.  For checkout, the script should accpet POST parameters amount, currency and paymentType and pass it on to checkout call.  For payment Status, the script should accept resourcePath and pass it on to status call.  For capturing payment, call the payment status first, get the payment id and pass it on the status check call.   Once your server script is ready, host it on your server, keep it's URL ready and proceed with the Android integration using the devsupport AI tool.  Change the following in your server script:    Change URL from \"https://test.oppwa.com/\" to \"https://oppwa.com/\".    Change User Id to Production User Id.    Change Password to Production Password.    Change Entity Id to Production Entity Id.     Success  Congrats! You just completed server integration.   If you need help, write us an email at support@devsupport.ai - happy to help!", 
            "title": "Arranging Checkout, Payment Status and Capture"
        }
    ]
}